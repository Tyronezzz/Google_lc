class Solution {
public:
    bool canCross(vector<int>& stones) {   
        if(stones[1]!= stones[0]+1)
            return false;
        
        unordered_set<int> stone;
        unordered_set<string> path;
        
        for(int i=0;i<stones.size();i++)
            stone.insert(stones[i]);
        
        return dfs(stones[0], stones.back(), stone, path, 1);
    }
    
    bool dfs(int pos, int des, unordered_set<int> &stone, unordered_set<string> &path, int k)
    {
        string curpath = to_string(pos) + "_" + to_string(k);
        
        if(path.count(curpath))
            return false; 
        if(pos+k == des)
            return true;
        if(!stone.count(pos+k))
            return false;
        
        path.insert(curpath);
        for(int i=-1;i<=1;i++)
        {
            if(k+i>0)
            {
                bool val = dfs(pos+k, des, stone, path, k+i);
                if(val) return true;
            }
                
        }
        
        return false;
    }
    
};
