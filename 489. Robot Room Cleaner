/**
 * // This is the robot's control interface.
 * // You should not implement it, or speculate about its implementation
 * class Robot {
 *   public:
 *     // Returns true if the cell in front is open and robot moves into the cell.
 *     // Returns false if the cell in front is blocked and robot stays in the current cell.
 *     bool move();
 *
 *     // Robot will stay in the same cell after calling turnLeft/turnRight.
 *     // Each turn will be 90 degrees.
 *     void turnLeft();
 *     void turnRight();
 *
 *     // Clean the current cell.
 *     void clean();
 * };
 */
class Solution {
public:
    void cleanRoom(Robot& robot) {
        set<string> path;
        
        dfs(path, robot, 0, 0, 0);
        
    }
    
    
    void dfs(set<string> &path, Robot& robot, int i, int j, int curpos)
    {
        string str = to_string(i)+','+to_string(j);
        
        if(path.count(str) )
            return;
        
        robot.clean();
        path.insert(str);
        //cout<<str<<endl;
        
        for(int n=0;n<4;n++)
        {
            if(robot.move())
            {
                int x=i, y=j;
                if(curpos==0)
                    x = i-1;
                else if(curpos==90)
                    y = j+1;
                else if(curpos==180)
                    x = i+1;
                else if(curpos==270)
                    y = j-1;
                
                dfs(path, robot, x, y, curpos);
                
                robot.turnLeft();
                robot.turnLeft();
                robot.move();
                robot.turnRight();
                robot.turnRight();
                
            }
            robot.turnRight();
            curpos += 90;
            curpos %= 360;
            
        }
        
        
        
    }
    
};
