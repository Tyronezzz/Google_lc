class Solution {
public:
    int numBusesToDestination(vector<vector<int>>& routes, int S, int T) {
    
        unordered_map<int, unordered_set<int>> umap;
        unordered_set<int> seen = {S};
        queue<pair<int, int>> bfs;
        bfs.push({S, 0});
        
        for(int i=0;i<routes.size();i++)
        {
            for(int stop:routes[i])
                umap[stop].insert(i);
        }
        
        
        while(!bfs.empty())
        {
            int stop = bfs.front().first, bus = bfs.front().second;
            bfs.pop();
            
            if(T == stop) return bus;
            
            for(int curbus:umap[stop])
            {
                for(int curstop:routes[curbus])
                {
                    if(seen.find(curstop) == seen.end())
                    {
                        seen.insert(curstop);
                        bfs.push({curstop, bus+1});
                    }
                }
                routes[curbus].clear();
                
            }
        }
        
        return -1;
        
        
    }
};
